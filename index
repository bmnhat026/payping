<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nh·∫Øc nh·ªü thanh to√°n th·∫ª t√≠n d·ª•ng</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            padding: 20px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .header {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            color: #2563eb;
            font-size: 28px;
            margin-bottom: 5px;
        }
        
        .header p {
            color: #666;
        }
        
        .btn {
            background: #2563eb;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
        }
        
        .btn:hover {
            background: #1d4ed8;
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 14px;
            margin: 2px;
        }
        
        .btn-green { background: #16a34a; }
        .btn-green:hover { background: #15803d; }
        
        .btn-orange { background: #ea580c; }
        .btn-orange:hover { background: #c2410c; }
        
        .btn-red { background: #dc2626; }
        .btn-red:hover { background: #b91c1c; }
        
        .btn-gray { background: #6b7280; }
        .btn-gray:hover { background: #4b5563; }
        
        .form-section {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .form-section.edit {
            border-left: 4px solid #ea580c;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #d1d5db;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #2563eb;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        .card-type-selector {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-top: 10px;
        }
        
        .card-type-option {
            padding: 20px;
            border: 2px solid #d1d5db;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            text-align: center;
        }
        
        .card-type-option.active {
            border-color: #2563eb;
            background-color: #eff6ff;
        }
        
        .card-type-option h3 {
            margin-bottom: 5px;
            color: #374151;
        }
        
        .card-type-option p {
            color: #6b7280;
            font-size: 14px;
        }
        
        .card-item {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 15px;
            border-left: 4px solid #d1d5db;
        }
        
        .card-item.paid {
            border-left-color: #16a34a;
            background-color: #f0fdf4;
        }
        
        .card-item.due-soon {
            border-left-color: #eab308;
            background-color: #fefce8;
        }
        
        .card-item.overdue {
            border-left-color: #dc2626;
            background-color: #fef2f2;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 15px;
        }
        
        .card-info h3 {
            color: #374151;
            font-size: 20px;
            margin-bottom: 5px;
        }
        
        .card-meta {
            color: #6b7280;
            font-size: 14px;
        }
        
        .card-status {
            text-align: right;
        }
        
        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 5px;
            display: inline-block;
        }
        
        .status-paid { background: #dcfce7; color: #166534; }
        .status-due-soon { background: #fef3c7; color: #92400e; }
        .status-overdue { background: #fecaca; color: #991b1b; }
        .status-upcoming { background: #dbeafe; color: #1e40af; }
        
        .card-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            align-items: center;
        }
        
        .stats {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .stat-item {
            text-align: center;
            padding: 20px;
            border-radius: 8px;
            background: #f9fafb;
        }
        
        .stat-number {
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #6b7280;
            font-size: 14px;
        }
        
        .hidden { display: none; }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .empty-state h3 {
            color: #374151;
            margin-bottom: 10px;
        }
        
        .empty-state p {
            color: #6b7280;
            margin-bottom: 20px;
        }
        
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                text-align: center;
                gap: 20px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .card-type-selector {
                grid-template-columns: 1fr;
            }
            
            .card-header {
                flex-direction: column;
                gap: 15px;
            }
            
            .card-actions {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div>
                <h1>üí≥ Nh·∫Øc nh·ªü thanh to√°n th·∫ª t√≠n d·ª•ng</h1>
                <p>Kh√¥ng bao gi·ªù b·ªè l·ª° thanh to√°n</p>
            </div>
            <button class="btn" onclick="showAddForm()">‚ûï Th√™m th·∫ª</button>
        </div>

        <!-- Add Card Form -->
        <div id="addForm" class="form-section hidden">
            <h2>Th√™m th·∫ª t√≠n d·ª•ng m·ªõi</h2>
            
            <div class="form-group">
                <label>T√™n th·∫ª</label>
                <input type="text" id="cardName" placeholder="VD: Techcombank Visa, VPBank Mastercard">
            </div>
            
            <div class="form-group">
                <label>Lo·∫°i ng√†y ƒë·∫øn h·∫°n</label>
                <div class="card-type-selector">
                    <div class="card-type-option active" onclick="selectCardType('fixed')">
                        <h3>üìÖ Ng√†y c·ªë ƒë·ªãnh</h3>
                        <p>VD: Ng√†y 15 h√†ng th√°ng</p>
                    </div>
                    <div class="card-type-option" onclick="selectCardType('variable')">
                        <h3>üîÑ Ng√†y bi·∫øn ƒë·ªông</h3>
                        <p>D·ª±a tr√™n ng√†y th√¥ng b√°o + s·ªë ng√†y</p>
                    </div>
                </div>
            </div>
            
            <div id="fixedDateInput" class="form-group">
                <label>Ng√†y ƒë·∫øn h·∫°n h√†ng th√°ng</label>
                <input type="date" id="dueDate">
                <small style="color: #6b7280;">Ch·ªâ c·∫ßn ch·ªçn m·ªôt ng√†y b·∫•t k·ª≥, ·ª©ng d·ª•ng s·∫Ω l·∫•y ng√†y trong th√°ng ƒë√≥ l√†m ng√†y c·ªë ƒë·ªãnh</small>
            </div>
            
            <div id="variableDateInput" class="form-row hidden">
                <div class="form-group">
                    <label>Ng√†y th√¥ng b√°o giao d·ªãch</label>
                    <input type="date" id="transactionDate">
                </div>
                <div class="form-group">
                    <label>S·ªë ng√†y c·ªông th√™m</label>
                    <input type="number" id="daysToAdd" value="20" min="1" max="365">
                </div>
            </div>
            
            <div style="display: flex; gap: 10px;">
                <button class="btn" onclick="addCard()">Th√™m th·∫ª</button>
                <button class="btn btn-gray" onclick="hideAddForm()">H·ªßy</button>
            </div>
        </div>

        <!-- Edit Card Form -->
        <div id="editForm" class="form-section edit hidden">
            <h2 style="color: #ea580c;">Ch·ªânh s·ª≠a th·∫ª t√≠n d·ª•ng</h2>
            
            <div class="form-group">
                <label>T√™n th·∫ª</label>
                <input type="text" id="editCardName" placeholder="VD: Techcombank Visa, VPBank Mastercard">
            </div>
            
            <div class="form-group">
                <label>Lo·∫°i ng√†y ƒë·∫øn h·∫°n</label>
                <div class="card-type-selector">
                    <div class="card-type-option" onclick="selectEditCardType('fixed')">
                        <h3>üìÖ Ng√†y c·ªë ƒë·ªãnh</h3>
                        <p>VD: Ng√†y 15 h√†ng th√°ng</p>
                    </div>
                    <div class="card-type-option" onclick="selectEditCardType('variable')">
                        <h3>üîÑ Ng√†y bi·∫øn ƒë·ªông</h3>
                        <p>D·ª±a tr√™n ng√†y th√¥ng b√°o + s·ªë ng√†y</p>
                    </div>
                </div>
            </div>
            
            <div id="editFixedDateInput" class="form-group">
                <label>Ng√†y ƒë·∫øn h·∫°n h√†ng th√°ng</label>
                <input type="date" id="editDueDate">
                <small style="color: #6b7280;">Ch·ªâ c·∫ßn ch·ªçn m·ªôt ng√†y b·∫•t k·ª≥, ·ª©ng d·ª•ng s·∫Ω l·∫•y ng√†y trong th√°ng ƒë√≥ l√†m ng√†y c·ªë ƒë·ªãnh</small>
            </div>
            
            <div id="editVariableDateInput" class="form-row hidden">
                <div class="form-group">
                    <label>Ng√†y th√¥ng b√°o giao d·ªãch</label>
                    <input type="date" id="editTransactionDate">
                </div>
                <div class="form-group">
                    <label>S·ªë ng√†y c·ªông th√™m</label>
                    <input type="number" id="editDaysToAdd" value="20" min="1" max="365">
                </div>
            </div>
            
            <div style="display: flex; gap: 10px;">
                <button class="btn btn-orange" onclick="saveEditCard()">üíæ L∆∞u thay ƒë·ªïi</button>
                <button class="btn btn-gray" onclick="cancelEdit()">‚ùå H·ªßy</button>
            </div>
        </div>

        <!-- Cards List -->
        <div id="cardsList"></div>

        <!-- Stats -->
        <div id="stats" class="stats hidden">
            <h3>T·ªïng quan</h3>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number" id="totalCards">0</div>
                    <div class="stat-label">T·ªïng s·ªë th·∫ª</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" style="color: #16a34a;" id="paidCards">0</div>
                    <div class="stat-label">ƒê√£ thanh to√°n</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" style="color: #eab308;" id="dueSoonCards">0</div>
                    <div class="stat-label">S·∫Øp ƒë·∫øn h·∫°n</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" style="color: #dc2626;" id="overdueCards">0</div>
                    <div class="stat-label">Qu√° h·∫°n</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let cards = [];
        let editingCardId = null;
        let currentCardType = 'fixed';
        let currentEditCardType = 'fixed';

        // Load cards from localStorage
        function loadCards() {
            const savedCards = localStorage.getItem('creditCards');
            if (savedCards) {
                cards = JSON.parse(savedCards);
            }
            renderCards();
            updateStats();
        }

        // Save cards to localStorage
        function saveCards() {
            localStorage.setItem('creditCards', JSON.stringify(cards));
        }

        // Calculate next due date for fixed type cards
        function getNextDueDateFixed(dueDate) {
            const today = new Date();
            const cardDueDay = new Date(dueDate).getDate();
            
            let nextDue = new Date(today.getFullYear(), today.getMonth(), cardDueDay);
            
            if (nextDue <= today) {
                nextDue = new Date(today.getFullYear(), today.getMonth() + 1, cardDueDay);
            }
            
            // Handle months with fewer days
            if (nextDue.getDate() !== cardDueDay) {
                nextDue = new Date(nextDue.getFullYear(), nextDue.getMonth() + 1, 0); // Last day of month
            }
            
            return nextDue;
        }

        // Calculate due date for variable type cards
        function getDueDateVariable(transactionDate, daysToAdd) {
            const txDate = new Date(transactionDate);
            const dueDate = new Date(txDate);
            dueDate.setDate(txDate.getDate() + parseInt(daysToAdd));
            return dueDate;
        }

        // Estimate next cycle for variable cards based on payment history
        function estimateNextCycle(card) {
            if (!card.paymentHistory || card.paymentHistory.length === 0) {
                // No history, use current transaction date + estimated cycle (30 days default)
                const estimatedCycleDays = card.estimatedCycleDays || 30;
                const currentTxDate = new Date(card.transactionDate);
                const nextTxDate = new Date(currentTxDate);
                nextTxDate.setDate(currentTxDate.getDate() + estimatedCycleDays);
                return {
                    transactionDate: nextTxDate.toISOString().split('T')[0],
                    daysToAdd: card.daysToAdd
                };
            }

            // Calculate average cycle length from history
            let totalCycleDays = 0;
            let cycleCount = 0;

            for (let i = 1; i < card.paymentHistory.length; i++) {
                const prevTxDate = new Date(card.paymentHistory[i-1].transactionDate);
                const currTxDate = new Date(card.paymentHistory[i].transactionDate);
                const cycleDays = Math.round((currTxDate - prevTxDate) / (1000 * 60 * 60 * 24));
                
                if (cycleDays > 0 && cycleDays < 60) { // Reasonable cycle length
                    totalCycleDays += cycleDays;
                    cycleCount++;
                }
            }

            // If we have cycle data, use average; otherwise use estimated or default
            let avgCycleDays = cycleCount > 0 ? Math.round(totalCycleDays / cycleCount) : (card.estimatedCycleDays || 30);
            
            // Get the last transaction date and add average cycle
            const lastTxDate = new Date(card.paymentHistory[card.paymentHistory.length - 1].transactionDate);
            const nextTxDate = new Date(lastTxDate);
            nextTxDate.setDate(lastTxDate.getDate() + avgCycleDays);

            return {
                transactionDate: nextTxDate.toISOString().split('T')[0],
                daysToAdd: card.daysToAdd,
                estimatedCycleDays: avgCycleDays
            };
        }

        // Calculate days until due
        function getDaysUntilDue(dueDate) {
            const today = new Date();
            const due = new Date(dueDate);
            const diffTime = due - today;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        }

        // Get card status
        function getCardStatus(daysUntil, isPaid) {
            if (isPaid) {
                return { status: 'ƒê√£ thanh to√°n', class: 'paid', badge: 'status-paid' };
            }
            if (daysUntil < 0) {
                return { status: 'Qu√° h·∫°n', class: 'overdue', badge: 'status-overdue' };
            }
            if (daysUntil <= 3) {
                return { status: 'S·∫Øp ƒë·∫øn h·∫°n', class: 'due-soon', badge: 'status-due-soon' };
            }
            return { status: 'S·∫Øp t·ªõi', class: 'upcoming', badge: 'status-upcoming' };
        }

        // Show add form
        function showAddForm() {
            document.getElementById('addForm').classList.remove('hidden');
            document.getElementById('cardName').focus();
        }

        // Hide add form
        function hideAddForm() {
            document.getElementById('addForm').classList.add('hidden');
            clearAddForm();
        }

        // Clear add form
        function clearAddForm() {
            document.getElementById('cardName').value = '';
            document.getElementById('dueDate').value = '';
            document.getElementById('transactionDate').value = '';
            document.getElementById('daysToAdd').value = '20';
            selectCardType('fixed');
        }

        // Select card type for add form
        function selectCardType(type) {
            currentCardType = type;
            
            // Update UI
            document.querySelectorAll('#addForm .card-type-option').forEach(option => {
                option.classList.remove('active');
            });
            
            if (type === 'fixed') {
                document.querySelectorAll('#addForm .card-type-option')[0].classList.add('active');
                document.getElementById('fixedDateInput').classList.remove('hidden');
                document.getElementById('variableDateInput').classList.add('hidden');
            } else {
                document.querySelectorAll('#addForm .card-type-option')[1].classList.add('active');
                document.getElementById('fixedDateInput').classList.add('hidden');
                document.getElementById('variableDateInput').classList.remove('hidden');
            }
        }

        // Select card type for edit form
        function selectEditCardType(type) {
            currentEditCardType = type;
            
            // Update UI
            document.querySelectorAll('#editForm .card-type-option').forEach(option => {
                option.classList.remove('active');
            });
            
            if (type === 'fixed') {
                document.querySelectorAll('#editForm .card-type-option')[0].classList.add('active');
                document.getElementById('editFixedDateInput').classList.remove('hidden');
                document.getElementById('editVariableDateInput').classList.add('hidden');
            } else {
                document.querySelectorAll('#editForm .card-type-option')[1].classList.add('active');
                document.getElementById('editFixedDateInput').classList.add('hidden');
                document.getElementById('editVariableDateInput').classList.remove('hidden');
            }
        }

        // Add new card
        function addCard() {
            const name = document.getElementById('cardName').value.trim();
            
            if (!name) {
                alert('Vui l√≤ng nh·∫≠p t√™n th·∫ª');
                return;
            }
            
            let nextDue;
            let cardData = {
                id: Date.now(),
                name: name,
                type: currentCardType,
                isPaid: false,
                lastPaidDate: null,
                paymentHistory: []
            };
            
            if (currentCardType === 'fixed') {
                const dueDate = document.getElementById('dueDate').value;
                if (!dueDate) {
                    alert('Vui l√≤ng ch·ªçn ng√†y ƒë·∫øn h·∫°n');
                    return;
                }
                cardData.originalDueDate = dueDate;
                nextDue = getNextDueDateFixed(dueDate);
            } else {
                const transactionDate = document.getElementById('transactionDate').value;
                const daysToAdd = document.getElementById('daysToAdd').value;
                
                if (!transactionDate || !daysToAdd) {
                    alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
                    return;
                }
                
                cardData.transactionDate = transactionDate;
                cardData.daysToAdd = parseInt(daysToAdd);
                cardData.estimatedCycleDays = 30; // Default cycle estimation
                nextDue = getDueDateVariable(transactionDate, daysToAdd);
            }
            
            cardData.nextDueDate = nextDue.toISOString();
            cards.push(cardData);
            
            saveCards();
            renderCards();
            updateStats();
            hideAddForm();
        }

        // Start editing card
        function startEdit(cardId) {
            const card = cards.find(c => c.id === cardId);
            if (!card) return;
            
            editingCardId = cardId;
            
            document.getElementById('editCardName').value = card.name;
            document.getElementById('editDueDate').value = card.originalDueDate || '';
            document.getElementById('editTransactionDate').value = card.transactionDate || '';
            document.getElementById('editDaysToAdd').value = card.daysToAdd || 20;
            
            selectEditCardType(card.type);
            document.getElementById('editForm').classList.remove('hidden');
        }

        // Save edited card
        function saveEditCard() {
            const name = document.getElementById('editCardName').value.trim();
            
            if (!name) {
                alert('Vui l√≤ng nh·∫≠p t√™n th·∫ª');
                return;
            }
            
            const cardIndex = cards.findIndex(c => c.id === editingCardId);
            if (cardIndex === -1) return;
            
            let nextDue;
            let cardData = {
                ...cards[cardIndex],
                name: name,
                type: currentEditCardType,
                isPaid: false,
                lastPaidDate: null,
                paymentHistory: cards[cardIndex].paymentHistory || [] // Preserve history
            };
            
            if (currentEditCardType === 'fixed') {
                const dueDate = document.getElementById('editDueDate').value;
                if (!dueDate) {
                    alert('Vui l√≤ng ch·ªçn ng√†y ƒë·∫øn h·∫°n');
                    return;
                }
                cardData.originalDueDate = dueDate;
                cardData.transactionDate = null;
                cardData.daysToAdd = null;
                cardData.estimatedCycleDays = null;
                nextDue = getNextDueDateFixed(dueDate);
            } else {
                const transactionDate = document.getElementById('editTransactionDate').value;
                const daysToAdd = document.getElementById('editDaysToAdd').value;
                
                if (!transactionDate || !daysToAdd) {
                    alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
                    return;
                }
                
                cardData.originalDueDate = null;
                cardData.transactionDate = transactionDate;
                cardData.daysToAdd = parseInt(daysToAdd);
                cardData.estimatedCycleDays = cardData.estimatedCycleDays || 30;
                nextDue = getDueDateVariable(transactionDate, daysToAdd);
            }
            
            cardData.nextDueDate = nextDue.toISOString();
            cards[cardIndex] = cardData;
            
            saveCards();
            renderCards();
            updateStats();
            cancelEdit();
        }

        // Cancel editing
        function cancelEdit() {
            editingCardId = null;
            document.getElementById('editForm').classList.add('hidden');
        }

        // Mark card as paid
        function markAsPaid(cardId) {
            const cardIndex = cards.findIndex(c => c.id === cardId);
            if (cardIndex === -1) return;
            
            const card = cards[cardIndex];
            const today = new Date();
            
            // Create payment history entry
            const paymentEntry = {
                paidDate: today.toISOString().split('T')[0],
                transactionDate: card.transactionDate || null,
                dueDate: card.nextDueDate.split('T')[0],
                cycleDays: null
            };
            
            // Calculate cycle days for variable cards
            if (card.type === 'variable' && card.paymentHistory.length > 0) {
                const lastPayment = card.paymentHistory[card.paymentHistory.length - 1];
                if (lastPayment.transactionDate && card.transactionDate) {
                    const lastTxDate = new Date(lastPayment.transactionDate);
                    const currentTxDate = new Date(card.transactionDate);
                    paymentEntry.cycleDays = Math.round((currentTxDate - lastTxDate) / (1000 * 60 * 60 * 24));
                }
            }
            
            // Add to payment history
            const updatedHistory = [...(card.paymentHistory || []), paymentEntry];
            
            // Calculate next cycle
            let nextDue;
            let updatedCard = {
                ...card,
                isPaid: true,
                lastPaidDate: today.toISOString(),
                paymentHistory: updatedHistory
            };
            
            if (card.type === 'fixed') {
                // For fixed cards, move to next month
                nextDue = getNextDueDateFixed(card.originalDueDate);
                updatedCard.nextDueDate = nextDue.toISOString();
            } else {
                // For variable cards, estimate next cycle
                const nextCycle = estimateNextCycle(updatedCard);
                updatedCard.transactionDate = nextCycle.transactionDate;
                updatedCard.daysToAdd = nextCycle.daysToAdd;
                updatedCard.estimatedCycleDays = nextCycle.estimatedCycleDays;
                nextDue = getDueDateVariable(nextCycle.transactionDate, nextCycle.daysToAdd);
                updatedCard.nextDueDate = nextDue.toISOString();
            }
            
            // Reset paid status for new cycle
            updatedCard.isPaid = false;
            updatedCard.lastPaidDate = today.toISOString();
            
            cards[cardIndex] = updatedCard;
            
            saveCards();
            renderCards();
            updateStats();
        }

        // Undo last payment (revert to previous cycle)
        function undoLastPayment(cardId) {
            const cardIndex = cards.findIndex(c => c.id === cardId);
            if (cardIndex === -1) return;
            
            const card = cards[cardIndex];
            
            if (!card.paymentHistory || card.paymentHistory.length === 0) {
                alert('Kh√¥ng c√≥ l·ªãch s·ª≠ thanh to√°n ƒë·ªÉ ho√†n t√°c');
                return;
            }
            
            // Remove last payment from history
            const updatedHistory = card.paymentHistory.slice(0, -1);
            const lastPayment = card.paymentHistory[card.paymentHistory.length - 1];
            
            let updatedCard = {
                ...card,
                paymentHistory: updatedHistory,
                isPaid: false
            };
            
            if (card.type === 'fixed') {
                // Revert to previous due date
                updatedCard.nextDueDate = new Date(lastPayment.dueDate).toISOString();
            } else {
                // Revert to previous transaction date and due date
                if (lastPayment.transactionDate) {
                    updatedCard.transactionDate = lastPayment.transactionDate;
                    const revertedDueDate = getDueDateVariable(lastPayment.transactionDate, card.daysToAdd);
                    updatedCard.nextDueDate = revertedDueDate.toISOString();
                }
            }
            
            cards[cardIndex] = updatedCard;
            
            saveCards();
            renderCards();
            updateStats();
        }

        // Reset card
        function resetCard(cardId) {
            const cardIndex = cards.findIndex(c => c.id === cardId);
            if (cardIndex === -1) return;
            
            cards[cardIndex] = {
                ...cards[cardIndex],
                isPaid: false,
                lastPaidDate: null
            };
            
            saveCards();
            renderCards();
            updateStats();
        }

        // Update transaction date
        function updateTransactionDate(cardId, newDate) {
            const cardIndex = cards.findIndex(c => c.id === cardId);
            if (cardIndex === -1) return;
            
            const card = cards[cardIndex];
            if (card.type !== 'variable') return;
            
            const newDueDate = getDueDateVariable(newDate, card.daysToAdd);
            
            cards[cardIndex] = {
                ...card,
                transactionDate: newDate,
                nextDueDate: newDueDate.toISOString(),
                isPaid: false,
                lastPaidDate: null
            };
            
            saveCards();
            renderCards();
            updateStats();
        }

        // Delete card
        function deleteCard(cardId) {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th·∫ª n√†y?')) {
                cards = cards.filter(c => c.id !== cardId);
                saveCards();
                renderCards();
                updateStats();
            }
        }

        // Render cards
        function renderCards() {
            const cardsList = document.getElementById('cardsList');
            
            if (cards.length === 0) {
                cardsList.innerHTML = `
                    <div class="empty-state">
                        <h3>Ch∆∞a c√≥ th·∫ª n√†o</h3>
                        <p>Th√™m th·∫ª t√≠n d·ª•ng ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu theo d√µi ng√†y ƒë·∫øn h·∫°n</p>
                        <button class="btn" onclick="showAddForm()">Th√™m th·∫ª ƒë·∫ßu ti√™n</button>
                    </div>
                `;
                return;
            }
            
            // Sort cards by due date
            const sortedCards = [...cards].sort((a, b) => {
                const aDays = getDaysUntilDue(a.nextDueDate);
                const bDays = getDaysUntilDue(b.nextDueDate);
                return aDays - bDays;
            });
            
            cardsList.innerHTML = sortedCards.map(card => {
                const daysUntil = getDaysUntilDue(card.nextDueDate);
                const { status, class: cardClass, badge } = getCardStatus(daysUntil, card.isPaid);
                const dueDate = new Date(card.nextDueDate);
                
                let daysText;
                if (daysUntil === 0) daysText = 'ƒê·∫øn h·∫°n h√¥m nay';
                else if (daysUntil === 1) daysText = 'ƒê·∫øn h·∫°n ng√†y mai';
                else if (daysUntil < 0) daysText = `Qu√° h·∫°n ${Math.abs(daysUntil)} ng√†y`;
                else daysText = `C√≤n ${daysUntil} ng√†y`;
                
                let typeInfo = '';
                if (card.type === 'variable') {
                    const estimatedText = card.estimatedCycleDays ? 
                        ` (Chu k·ª≥ ∆∞·ªõc t√≠nh: ${card.estimatedCycleDays} ng√†y)` : '';
                    typeInfo = `<div style="font-size: 12px; color: #6b7280; margin-top: 5px;">
                        Ng√†y GD: ${new Date(card.transactionDate).toLocaleDateString('vi-VN')} + ${card.daysToAdd} ng√†y${estimatedText}
                    </div>`;
                }
                
                // Payment history
                let historyInfo = '';
                if (card.paymentHistory && card.paymentHistory.length > 0) {
                    const recentPayments = card.paymentHistory.slice(-3).reverse(); // Last 3 payments
                    historyInfo = `<div style="font-size: 11px; color: #6b7280; margin-top: 8px; padding: 8px; background: #f9fafb; border-radius: 4px;">
                        <strong>üìä L·ªãch s·ª≠ thanh to√°n g·∫ßn ƒë√¢y:</strong><br>
                        ${recentPayments.map(payment => {
                            const cycleText = payment.cycleDays ? ` (${payment.cycleDays} ng√†y)` : '';
                            return `‚Ä¢ ${new Date(payment.paidDate).toLocaleDateString('vi-VN')}${cycleText}`;
                        }).join('<br>')}
                    </div>`;
                }
                
                let actionButtons = '';
                if (!card.isPaid) {
                    actionButtons += `<button class="btn btn-sm btn-green" onclick="markAsPaid(${card.id})">‚úÖ ƒê√°nh d·∫•u ƒë√£ thanh to√°n</button>`;
                } else {
                    actionButtons += `<button class="btn btn-sm btn-gray" onclick="resetCard(${card.id})">üîÑ ƒê·∫∑t l·∫°i</button>`;
                }
                
                // Add undo button if there's payment history
                if (card.paymentHistory && card.paymentHistory.length > 0) {
                    actionButtons += `<button class="btn btn-sm" style="background: #8b5cf6; color: white;" onclick="undoLastPayment(${card.id})" title="Ho√†n t√°c thanh to√°n th√°ng tr∆∞·ªõc">‚Ü∂ Ho√†n t√°c</button>`;
                }
                
                if (card.type === 'variable') {
                    actionButtons += `
                        <input type="date" onchange="updateTransactionDate(${card.id}, this.value)" 
                               style="font-size: 12px; padding: 4px; margin: 2px; border: 1px solid #d1d5db; border-radius: 4px;"
                               title="C·∫≠p nh·∫≠t ng√†y th√¥ng b√°o giao d·ªãch m·ªõi">
                        <span style="font-size: 10px; color: #6b7280;">Ng√†y GD m·ªõi</span>
                    `;
                }
                
                actionButtons += `
                    <button class="btn btn-sm btn-orange" onclick="startEdit(${card.id})">‚úèÔ∏è S·ª≠a</button>
                    <button class="btn btn-sm btn-red" onclick="deleteCard(${card.id})">üóëÔ∏è X√≥a</button>
                `;
                
                return `
                    <div class="card-item ${cardClass}">
                        <div class="card-header">
                            <div class="card-info">
                                <h3>${card.name}</h3>
                                <div class="card-meta">
                                    <span style="background: ${card.type === 'fixed' ? '#dbeafe' : '#dcfce7'}; 
                                                 color: ${card.type === 'fixed' ? '#1e40af' : '#166534'}; 
                                                 padding: 2px 8px; border-radius: 12px; font-size: 11px; margin-right: 10px;">
                                        ${card.type === 'fixed' ? 'üìÖ Ng√†y c·ªë ƒë·ªãnh' : 'üîÑ Ng√†y bi·∫øn ƒë·ªông'}
                                    </span>
                                    ƒê·∫øn h·∫°n: ${dueDate.toLocaleDateString('vi-VN', { 
                                        weekday: 'short', 
                                        year: 'numeric', 
                                        month: 'short', 
                                        day: 'numeric' 
                                    })}
                                </div>
                                ${typeInfo}
                                ${historyInfo}
                            </div>
                            <div class="card-status">
                                <div class="status-badge ${badge}">${status}</div>
                                <div style="color: #6b7280; font-size: 14px;">${daysText}</div>
                            </div>
                        </div>
                        <div class="card-actions">
                            ${actionButtons}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Update stats
        function updateStats() {
            if (cards.length === 0) {
                document.getElementById('stats').classList.add('hidden');
                return;
            }
            
            document.getElementById('stats').classList.remove('hidden');
            
            const totalCards = cards.length;
            const paidCards = cards.filter(card => card.isPaid).length;
            const dueSoonCards = cards.filter(card => 
                !card.isPaid && 
                getDaysUntilDue(card.nextDueDate) <= 3 && 
                getDaysUntilDue(card.nextDueDate) >= 0
            ).length;
            const overdueCards = cards.filter(card => 
                !card.isPaid && 
                getDaysUntilDue(card.nextDueDate) < 0
            ).length;
            
            document.getElementById('totalCards').textContent = totalCards;
            document.getElementById('paidCards').textContent = paidCards;
            document.getElementById('dueSoonCards').textContent = dueSoonCards;
            document.getElementById('overdueCards').textContent = overdueCards;
        }

        // Initialize app
        window.onload = function() {
            loadCards();
        };
    </script>
</body>
</html>
